# dynamic/v1/views/users.py

#!/usr/bin/python3
"""
View module for handling User objects
"""

from os import path
from flask import Flask, jsonify, request, abort, render_template, redirect, url_for, g
from sqlalchemy import create_engine
from werkzeug.utils import secure_filename
from dynamic.v1.views import app_views
from models import storage, User, UserRoleEnum, Club, Player, Scout
from console import FootballScoutCommand
import logging

from sqlalchemy.orm import sessionmaker
from models.base_model import Base

logging.basicConfig(level=logging.DEBUG)

# Database setup
db = "sqlite:///footDB.db"
engine = create_engine(db, pool_pre_ping=True)

# Create a session
Session = sessionmaker(bind=engine)
session = Session()

@app_views.before_request
def load_user():
    user_id = get_current_user_id()  # Function to get the current user ID
    if user_id:
        user = storage.get(User, user_id)
        if user:
            g.user_content = user.to_dict()
        else:
            g.user_content = {}
    else:
        g.user_content = {}

def get_current_user_id():
    """Get the current user ID from the session."""
    return session.get('user_id')
    # return user_id

@app_views.route('/users', methods=['GET'])
def get_users():
    """Retrieves the list of all User objects"""
    users = storage.all(User).values()
    users_list = [user.to_dict() for user in users]
    return jsonify(users_list)

@app_views.route('/users/<user_id>', methods=['GET'])
def get_user(user_id):
    """Retrieves a User object"""
    user = storage.get(User, user_id)
    if not user:
        abort(404)
    return jsonify(user.to_dict())

@app_views.route('/users/<user_id>', methods=['DELETE'])
def delete_user(user_id):
    """Deletes a User object"""
    user = storage.get(User, user_id)
    if not user:
        abort(404)
    user.delete()
    storage.save()
    return jsonify({}), 200

@app_views.route('/users', methods=['POST'])
def create_user():
    """Creates a User object"""
    if not request.get_json():
        abort(400, description="Not a JSON")
    data = request.get_json()
    if 'email' not in data:
        abort(400, description="Missing email")
    if 'password' not in data:
        abort(400, description="Missing password")
    if 'first_name' not in data:
        abort(400, description="Missing first_name")
    if 'last_name' not in data:
        abort(400, description="Missing last_name")

    # Ensure role is set to 'ordinary' if not provided
    role = data.get('role', 'ordinary')
    if role not in ['ordinary', 'player', 'scout']:
        abort(400, description="Invalid role")

    # Create the User object with proper role
    data['role'] = UserRoleEnum[role]  # Convert role string to UserRoleEnum

    user = User(**data)
    user.save()

    return jsonify(user.to_dict()), 201

@app_views.route('/users/<user_id>', methods=['PUT'])
def update_user(user_id):
    """Updates a User object"""
    user = storage.get(User, user_id)
    if not user:
        abort(404)

    if not request.get_json():
        abort(400, description="Not a JSON")

    data = request.get_json()

    # Check if 'role' is in the update data
    if 'role' in data:
        new_role = data['role']
        if new_role not in ['scout', 'player']:
            abort(400, description="Invalid role")

    # Check if 'club_id' is provided and valid
    if 'club_id' in data:
        club_id = data['club_id']
        club = storage.get(Club, club_id)
        if not club:
            abort(400, description=f"Club with ID {club_id} not found")

        # Assign club_id to user
        user.club_id = club_id

    try:
        # Update user role if 'role' is provided
        if 'role' in data:
            # Use the role_switch method from console.py to switch roles
            FootballScoutCommand().do_role_switch(f"{user_id} {new_role} {club_id}")

            # Retrieve the new role instance
            if new_role == 'player':
                new_instance = storage.get(Player, user_id)
                if not new_instance:
                    abort(404, description="New Player instance not found")
                return jsonify(new_instance.to_dict()), 200

            elif new_role == 'scout':
                new_instance = storage.get(Scout, user_id)
                if not new_instance:
                    abort(404, description="New Scout instance not found")
                return jsonify(new_instance.to_dict()), 200

    except Exception as e:
        storage.rollback()  # Ensure the session is rolled back
        abort(400, description=f"Failed to update user: {str(e)}")

    # Update other fields
    for key, value in data.items():
        if key != 'id' and hasattr(user, key):
            setattr(user, key, value)

    user.save()
    return jsonify(user.to_dict())

def allowed_file(filename):
    from dynamic.v1.app import app
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app_views.route('/profile/<user_id>', methods=['GET'])
def profile(user_id):

    # Fetch user data based on user_id
    user = storage.get(User, user_id)
    if not user:
        return "User not found", 404

    return render_template('profile.html', content=user.to_dict())

@app_views.route('/upload_profile_picture/<user_id>', methods=['POST'])
def upload_profile_picture(user_id):
    from dynamic.v1.app import app

    # Fetch user data from the database
    user = storage.get(User, user_id)

    if not user:
        abort(404, description="User not found")

    if 'profile_picture' not in request.files:
        logging.debug("No profile picture in request files")
        return jsonify({"error": "No profile picture in request files"}), 400

    file = request.files['profile_picture']
    if file.filename == '':
        logging.debug("Empty filename")
        return jsonify({"error": "Empty filename"}), 400

    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = path.join(app.config['UPLOAD_FOLDER'], filename)
        logging.debug(f"Saving file to {filepath}")
        file.save(filepath)

        # Update user's profile picture path in the database
        user.profile_picture = filename
        user.save()

        logging.debug(f"Updating user {user.first_name} profile picture to {filename}")
        return jsonify(user.to_dict())

@app_views.route('/uploads/<filename>')
def uploaded_file(filename):
    from flask import send_from_directory
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

